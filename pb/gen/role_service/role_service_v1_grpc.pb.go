// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: role_service_v1.proto

package role_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoleServiceV1_CreateRole_FullMethodName      = "/role.RoleServiceV1/CreateRole"
	RoleServiceV1_GetRoleByID_FullMethodName     = "/role.RoleServiceV1/GetRoleByID"
	RoleServiceV1_GetAllRole_FullMethodName      = "/role.RoleServiceV1/GetAllRole"
	RoleServiceV1_UpdateRole_FullMethodName      = "/role.RoleServiceV1/UpdateRole"
	RoleServiceV1_DeleteRole_FullMethodName      = "/role.RoleServiceV1/DeleteRole"
	RoleServiceV1_CheckAdminRole_FullMethodName  = "/role.RoleServiceV1/CheckAdminRole"
	RoleServiceV1_CreateAdminRole_FullMethodName = "/role.RoleServiceV1/CreateAdminRole"
	RoleServiceV1_UpdateAdminRole_FullMethodName = "/role.RoleServiceV1/UpdateAdminRole"
	RoleServiceV1_DeleteAdminRole_FullMethodName = "/role.RoleServiceV1/DeleteAdminRole"
	RoleServiceV1_GetAllAdminRole_FullMethodName = "/role.RoleServiceV1/GetAllAdminRole"
)

// RoleServiceV1Client is the client API for RoleServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceV1Client interface {
	CreateRole(ctx context.Context, in *CreateRoleRequestV1, opts ...grpc.CallOption) (*RoleEntityV1, error)
	GetRoleByID(ctx context.Context, in *GetRoleByIDRequestV1, opts ...grpc.CallOption) (*RoleEntityV1, error)
	GetAllRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllRoleEntityV1, error)
	UpdateRole(ctx context.Context, in *RoleEntityV1, opts ...grpc.CallOption) (*RoleEntityV1, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckAdminRole(ctx context.Context, in *CheckAdminRoleRequestV1, opts ...grpc.CallOption) (*CheckAdminRoleResponseV1, error)
	CreateAdminRole(ctx context.Context, in *CreateAdminRoleRequestV1, opts ...grpc.CallOption) (*AdminRoleEntityV1, error)
	UpdateAdminRole(ctx context.Context, in *AdminRoleEntityV1, opts ...grpc.CallOption) (*AdminRoleEntityV1, error)
	DeleteAdminRole(ctx context.Context, in *DeleteAdminRoleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllAdminRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllAdminRoleEntityV1, error)
}

type roleServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceV1Client(cc grpc.ClientConnInterface) RoleServiceV1Client {
	return &roleServiceV1Client{cc}
}

func (c *roleServiceV1Client) CreateRole(ctx context.Context, in *CreateRoleRequestV1, opts ...grpc.CallOption) (*RoleEntityV1, error) {
	out := new(RoleEntityV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) GetRoleByID(ctx context.Context, in *GetRoleByIDRequestV1, opts ...grpc.CallOption) (*RoleEntityV1, error) {
	out := new(RoleEntityV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_GetRoleByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) GetAllRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllRoleEntityV1, error) {
	out := new(AllRoleEntityV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_GetAllRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) UpdateRole(ctx context.Context, in *RoleEntityV1, opts ...grpc.CallOption) (*RoleEntityV1, error) {
	out := new(RoleEntityV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) DeleteRole(ctx context.Context, in *DeleteRoleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleServiceV1_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) CheckAdminRole(ctx context.Context, in *CheckAdminRoleRequestV1, opts ...grpc.CallOption) (*CheckAdminRoleResponseV1, error) {
	out := new(CheckAdminRoleResponseV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_CheckAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) CreateAdminRole(ctx context.Context, in *CreateAdminRoleRequestV1, opts ...grpc.CallOption) (*AdminRoleEntityV1, error) {
	out := new(AdminRoleEntityV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_CreateAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) UpdateAdminRole(ctx context.Context, in *AdminRoleEntityV1, opts ...grpc.CallOption) (*AdminRoleEntityV1, error) {
	out := new(AdminRoleEntityV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_UpdateAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) DeleteAdminRole(ctx context.Context, in *DeleteAdminRoleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoleServiceV1_DeleteAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceV1Client) GetAllAdminRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllAdminRoleEntityV1, error) {
	out := new(AllAdminRoleEntityV1)
	err := c.cc.Invoke(ctx, RoleServiceV1_GetAllAdminRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceV1Server is the server API for RoleServiceV1 service.
// All implementations must embed UnimplementedRoleServiceV1Server
// for forward compatibility
type RoleServiceV1Server interface {
	CreateRole(context.Context, *CreateRoleRequestV1) (*RoleEntityV1, error)
	GetRoleByID(context.Context, *GetRoleByIDRequestV1) (*RoleEntityV1, error)
	GetAllRole(context.Context, *emptypb.Empty) (*AllRoleEntityV1, error)
	UpdateRole(context.Context, *RoleEntityV1) (*RoleEntityV1, error)
	DeleteRole(context.Context, *DeleteRoleRequestV1) (*emptypb.Empty, error)
	CheckAdminRole(context.Context, *CheckAdminRoleRequestV1) (*CheckAdminRoleResponseV1, error)
	CreateAdminRole(context.Context, *CreateAdminRoleRequestV1) (*AdminRoleEntityV1, error)
	UpdateAdminRole(context.Context, *AdminRoleEntityV1) (*AdminRoleEntityV1, error)
	DeleteAdminRole(context.Context, *DeleteAdminRoleRequestV1) (*emptypb.Empty, error)
	GetAllAdminRole(context.Context, *emptypb.Empty) (*AllAdminRoleEntityV1, error)
	mustEmbedUnimplementedRoleServiceV1Server()
}

// UnimplementedRoleServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceV1Server struct {
}

func (UnimplementedRoleServiceV1Server) CreateRole(context.Context, *CreateRoleRequestV1) (*RoleEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleServiceV1Server) GetRoleByID(context.Context, *GetRoleByIDRequestV1) (*RoleEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByID not implemented")
}
func (UnimplementedRoleServiceV1Server) GetAllRole(context.Context, *emptypb.Empty) (*AllRoleEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRole not implemented")
}
func (UnimplementedRoleServiceV1Server) UpdateRole(context.Context, *RoleEntityV1) (*RoleEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceV1Server) DeleteRole(context.Context, *DeleteRoleRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceV1Server) CheckAdminRole(context.Context, *CheckAdminRoleRequestV1) (*CheckAdminRoleResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdminRole not implemented")
}
func (UnimplementedRoleServiceV1Server) CreateAdminRole(context.Context, *CreateAdminRoleRequestV1) (*AdminRoleEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminRole not implemented")
}
func (UnimplementedRoleServiceV1Server) UpdateAdminRole(context.Context, *AdminRoleEntityV1) (*AdminRoleEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminRole not implemented")
}
func (UnimplementedRoleServiceV1Server) DeleteAdminRole(context.Context, *DeleteAdminRoleRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminRole not implemented")
}
func (UnimplementedRoleServiceV1Server) GetAllAdminRole(context.Context, *emptypb.Empty) (*AllAdminRoleEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAdminRole not implemented")
}
func (UnimplementedRoleServiceV1Server) mustEmbedUnimplementedRoleServiceV1Server() {}

// UnsafeRoleServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceV1Server will
// result in compilation errors.
type UnsafeRoleServiceV1Server interface {
	mustEmbedUnimplementedRoleServiceV1Server()
}

func RegisterRoleServiceV1Server(s grpc.ServiceRegistrar, srv RoleServiceV1Server) {
	s.RegisterService(&RoleServiceV1_ServiceDesc, srv)
}

func _RoleServiceV1_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).CreateRole(ctx, req.(*CreateRoleRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_GetRoleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).GetRoleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_GetRoleByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).GetRoleByID(ctx, req.(*GetRoleByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_GetAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).GetAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_GetAllRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).GetAllRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).UpdateRole(ctx, req.(*RoleEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).DeleteRole(ctx, req.(*DeleteRoleRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_CheckAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdminRoleRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).CheckAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_CheckAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).CheckAdminRole(ctx, req.(*CheckAdminRoleRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_CreateAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminRoleRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).CreateAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_CreateAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).CreateAdminRole(ctx, req.(*CreateAdminRoleRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_UpdateAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRoleEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).UpdateAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_UpdateAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).UpdateAdminRole(ctx, req.(*AdminRoleEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_DeleteAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRoleRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).DeleteAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_DeleteAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).DeleteAdminRole(ctx, req.(*DeleteAdminRoleRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleServiceV1_GetAllAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceV1Server).GetAllAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleServiceV1_GetAllAdminRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceV1Server).GetAllAdminRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleServiceV1_ServiceDesc is the grpc.ServiceDesc for RoleServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "role.RoleServiceV1",
	HandlerType: (*RoleServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleServiceV1_CreateRole_Handler,
		},
		{
			MethodName: "GetRoleByID",
			Handler:    _RoleServiceV1_GetRoleByID_Handler,
		},
		{
			MethodName: "GetAllRole",
			Handler:    _RoleServiceV1_GetAllRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleServiceV1_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleServiceV1_DeleteRole_Handler,
		},
		{
			MethodName: "CheckAdminRole",
			Handler:    _RoleServiceV1_CheckAdminRole_Handler,
		},
		{
			MethodName: "CreateAdminRole",
			Handler:    _RoleServiceV1_CreateAdminRole_Handler,
		},
		{
			MethodName: "UpdateAdminRole",
			Handler:    _RoleServiceV1_UpdateAdminRole_Handler,
		},
		{
			MethodName: "DeleteAdminRole",
			Handler:    _RoleServiceV1_DeleteAdminRole_Handler,
		},
		{
			MethodName: "GetAllAdminRole",
			Handler:    _RoleServiceV1_GetAllAdminRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role_service_v1.proto",
}
