// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: master_service_v1.proto

package master_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MasterServiceV1_CreateMaster_FullMethodName  = "/master.MasterServiceV1/CreateMaster"
	MasterServiceV1_UpdateMaster_FullMethodName  = "/master.MasterServiceV1/UpdateMaster"
	MasterServiceV1_GetMasterByID_FullMethodName = "/master.MasterServiceV1/GetMasterByID"
	MasterServiceV1_GetAllMaster_FullMethodName  = "/master.MasterServiceV1/GetAllMaster"
	MasterServiceV1_DeleteMaster_FullMethodName  = "/master.MasterServiceV1/DeleteMaster"
)

// MasterServiceV1Client is the client API for MasterServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceV1Client interface {
	CreateMaster(ctx context.Context, in *CreateMasterRequestV1, opts ...grpc.CallOption) (*MasterEntityV1, error)
	UpdateMaster(ctx context.Context, in *MasterEntityV1, opts ...grpc.CallOption) (*MasterEntityV1, error)
	GetMasterByID(ctx context.Context, in *GetMasterByIDRequestV1, opts ...grpc.CallOption) (*MasterEntityV1, error)
	GetAllMaster(ctx context.Context, in *GetAllMasterRequestV1, opts ...grpc.CallOption) (*GetAllMasterResponseV1, error)
	DeleteMaster(ctx context.Context, in *DeleteMasterRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type masterServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceV1Client(cc grpc.ClientConnInterface) MasterServiceV1Client {
	return &masterServiceV1Client{cc}
}

func (c *masterServiceV1Client) CreateMaster(ctx context.Context, in *CreateMasterRequestV1, opts ...grpc.CallOption) (*MasterEntityV1, error) {
	out := new(MasterEntityV1)
	err := c.cc.Invoke(ctx, MasterServiceV1_CreateMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceV1Client) UpdateMaster(ctx context.Context, in *MasterEntityV1, opts ...grpc.CallOption) (*MasterEntityV1, error) {
	out := new(MasterEntityV1)
	err := c.cc.Invoke(ctx, MasterServiceV1_UpdateMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceV1Client) GetMasterByID(ctx context.Context, in *GetMasterByIDRequestV1, opts ...grpc.CallOption) (*MasterEntityV1, error) {
	out := new(MasterEntityV1)
	err := c.cc.Invoke(ctx, MasterServiceV1_GetMasterByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceV1Client) GetAllMaster(ctx context.Context, in *GetAllMasterRequestV1, opts ...grpc.CallOption) (*GetAllMasterResponseV1, error) {
	out := new(GetAllMasterResponseV1)
	err := c.cc.Invoke(ctx, MasterServiceV1_GetAllMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceV1Client) DeleteMaster(ctx context.Context, in *DeleteMasterRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MasterServiceV1_DeleteMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceV1Server is the server API for MasterServiceV1 service.
// All implementations must embed UnimplementedMasterServiceV1Server
// for forward compatibility
type MasterServiceV1Server interface {
	CreateMaster(context.Context, *CreateMasterRequestV1) (*MasterEntityV1, error)
	UpdateMaster(context.Context, *MasterEntityV1) (*MasterEntityV1, error)
	GetMasterByID(context.Context, *GetMasterByIDRequestV1) (*MasterEntityV1, error)
	GetAllMaster(context.Context, *GetAllMasterRequestV1) (*GetAllMasterResponseV1, error)
	DeleteMaster(context.Context, *DeleteMasterRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedMasterServiceV1Server()
}

// UnimplementedMasterServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedMasterServiceV1Server struct {
}

func (UnimplementedMasterServiceV1Server) CreateMaster(context.Context, *CreateMasterRequestV1) (*MasterEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaster not implemented")
}
func (UnimplementedMasterServiceV1Server) UpdateMaster(context.Context, *MasterEntityV1) (*MasterEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaster not implemented")
}
func (UnimplementedMasterServiceV1Server) GetMasterByID(context.Context, *GetMasterByIDRequestV1) (*MasterEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterByID not implemented")
}
func (UnimplementedMasterServiceV1Server) GetAllMaster(context.Context, *GetAllMasterRequestV1) (*GetAllMasterResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMaster not implemented")
}
func (UnimplementedMasterServiceV1Server) DeleteMaster(context.Context, *DeleteMasterRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaster not implemented")
}
func (UnimplementedMasterServiceV1Server) mustEmbedUnimplementedMasterServiceV1Server() {}

// UnsafeMasterServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceV1Server will
// result in compilation errors.
type UnsafeMasterServiceV1Server interface {
	mustEmbedUnimplementedMasterServiceV1Server()
}

func RegisterMasterServiceV1Server(s grpc.ServiceRegistrar, srv MasterServiceV1Server) {
	s.RegisterService(&MasterServiceV1_ServiceDesc, srv)
}

func _MasterServiceV1_CreateMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMasterRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceV1Server).CreateMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterServiceV1_CreateMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceV1Server).CreateMaster(ctx, req.(*CreateMasterRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServiceV1_UpdateMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceV1Server).UpdateMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterServiceV1_UpdateMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceV1Server).UpdateMaster(ctx, req.(*MasterEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServiceV1_GetMasterByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceV1Server).GetMasterByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterServiceV1_GetMasterByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceV1Server).GetMasterByID(ctx, req.(*GetMasterByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServiceV1_GetAllMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMasterRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceV1Server).GetAllMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterServiceV1_GetAllMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceV1Server).GetAllMaster(ctx, req.(*GetAllMasterRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterServiceV1_DeleteMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMasterRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceV1Server).DeleteMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterServiceV1_DeleteMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceV1Server).DeleteMaster(ctx, req.(*DeleteMasterRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterServiceV1_ServiceDesc is the grpc.ServiceDesc for MasterServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.MasterServiceV1",
	HandlerType: (*MasterServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMaster",
			Handler:    _MasterServiceV1_CreateMaster_Handler,
		},
		{
			MethodName: "UpdateMaster",
			Handler:    _MasterServiceV1_UpdateMaster_Handler,
		},
		{
			MethodName: "GetMasterByID",
			Handler:    _MasterServiceV1_GetMasterByID_Handler,
		},
		{
			MethodName: "GetAllMaster",
			Handler:    _MasterServiceV1_GetAllMaster_Handler,
		},
		{
			MethodName: "DeleteMaster",
			Handler:    _MasterServiceV1_DeleteMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service_v1.proto",
}

const (
	ProfileServiceV1_CreateProfile_FullMethodName        = "/master.ProfileServiceV1/CreateProfile"
	ProfileServiceV1_UpdateProfile_FullMethodName        = "/master.ProfileServiceV1/UpdateProfile"
	ProfileServiceV1_GetProfileByID_FullMethodName       = "/master.ProfileServiceV1/GetProfileByID"
	ProfileServiceV1_GetProfileByMasterID_FullMethodName = "/master.ProfileServiceV1/GetProfileByMasterID"
	ProfileServiceV1_GetAllProfile_FullMethodName        = "/master.ProfileServiceV1/GetAllProfile"
	ProfileServiceV1_DeleteProfile_FullMethodName        = "/master.ProfileServiceV1/DeleteProfile"
)

// ProfileServiceV1Client is the client API for ProfileServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceV1Client interface {
	CreateProfile(ctx context.Context, in *CreateProfileRequestV1, opts ...grpc.CallOption) (*ProfileEntityV1, error)
	UpdateProfile(ctx context.Context, in *ProfileEntityV1, opts ...grpc.CallOption) (*ProfileEntityV1, error)
	GetProfileByID(ctx context.Context, in *GetProfileByIDRequestV1, opts ...grpc.CallOption) (*ProfileEntityV1, error)
	GetProfileByMasterID(ctx context.Context, in *GetProfileByMasterIDRequestV1, opts ...grpc.CallOption) (*ProfileEntityV1, error)
	GetAllProfile(ctx context.Context, in *GetAllProfileRequestV1, opts ...grpc.CallOption) (*GetAllProfileResponseV1, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type profileServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceV1Client(cc grpc.ClientConnInterface) ProfileServiceV1Client {
	return &profileServiceV1Client{cc}
}

func (c *profileServiceV1Client) CreateProfile(ctx context.Context, in *CreateProfileRequestV1, opts ...grpc.CallOption) (*ProfileEntityV1, error) {
	out := new(ProfileEntityV1)
	err := c.cc.Invoke(ctx, ProfileServiceV1_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceV1Client) UpdateProfile(ctx context.Context, in *ProfileEntityV1, opts ...grpc.CallOption) (*ProfileEntityV1, error) {
	out := new(ProfileEntityV1)
	err := c.cc.Invoke(ctx, ProfileServiceV1_UpdateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceV1Client) GetProfileByID(ctx context.Context, in *GetProfileByIDRequestV1, opts ...grpc.CallOption) (*ProfileEntityV1, error) {
	out := new(ProfileEntityV1)
	err := c.cc.Invoke(ctx, ProfileServiceV1_GetProfileByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceV1Client) GetProfileByMasterID(ctx context.Context, in *GetProfileByMasterIDRequestV1, opts ...grpc.CallOption) (*ProfileEntityV1, error) {
	out := new(ProfileEntityV1)
	err := c.cc.Invoke(ctx, ProfileServiceV1_GetProfileByMasterID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceV1Client) GetAllProfile(ctx context.Context, in *GetAllProfileRequestV1, opts ...grpc.CallOption) (*GetAllProfileResponseV1, error) {
	out := new(GetAllProfileResponseV1)
	err := c.cc.Invoke(ctx, ProfileServiceV1_GetAllProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceV1Client) DeleteProfile(ctx context.Context, in *DeleteProfileRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProfileServiceV1_DeleteProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceV1Server is the server API for ProfileServiceV1 service.
// All implementations must embed UnimplementedProfileServiceV1Server
// for forward compatibility
type ProfileServiceV1Server interface {
	CreateProfile(context.Context, *CreateProfileRequestV1) (*ProfileEntityV1, error)
	UpdateProfile(context.Context, *ProfileEntityV1) (*ProfileEntityV1, error)
	GetProfileByID(context.Context, *GetProfileByIDRequestV1) (*ProfileEntityV1, error)
	GetProfileByMasterID(context.Context, *GetProfileByMasterIDRequestV1) (*ProfileEntityV1, error)
	GetAllProfile(context.Context, *GetAllProfileRequestV1) (*GetAllProfileResponseV1, error)
	DeleteProfile(context.Context, *DeleteProfileRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedProfileServiceV1Server()
}

// UnimplementedProfileServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceV1Server struct {
}

func (UnimplementedProfileServiceV1Server) CreateProfile(context.Context, *CreateProfileRequestV1) (*ProfileEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedProfileServiceV1Server) UpdateProfile(context.Context, *ProfileEntityV1) (*ProfileEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServiceV1Server) GetProfileByID(context.Context, *GetProfileByIDRequestV1) (*ProfileEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByID not implemented")
}
func (UnimplementedProfileServiceV1Server) GetProfileByMasterID(context.Context, *GetProfileByMasterIDRequestV1) (*ProfileEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByMasterID not implemented")
}
func (UnimplementedProfileServiceV1Server) GetAllProfile(context.Context, *GetAllProfileRequestV1) (*GetAllProfileResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProfile not implemented")
}
func (UnimplementedProfileServiceV1Server) DeleteProfile(context.Context, *DeleteProfileRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedProfileServiceV1Server) mustEmbedUnimplementedProfileServiceV1Server() {}

// UnsafeProfileServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceV1Server will
// result in compilation errors.
type UnsafeProfileServiceV1Server interface {
	mustEmbedUnimplementedProfileServiceV1Server()
}

func RegisterProfileServiceV1Server(s grpc.ServiceRegistrar, srv ProfileServiceV1Server) {
	s.RegisterService(&ProfileServiceV1_ServiceDesc, srv)
}

func _ProfileServiceV1_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileServiceV1_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).CreateProfile(ctx, req.(*CreateProfileRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileServiceV1_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileServiceV1_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).UpdateProfile(ctx, req.(*ProfileEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileServiceV1_GetProfileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).GetProfileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileServiceV1_GetProfileByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).GetProfileByID(ctx, req.(*GetProfileByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileServiceV1_GetProfileByMasterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByMasterIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).GetProfileByMasterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileServiceV1_GetProfileByMasterID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).GetProfileByMasterID(ctx, req.(*GetProfileByMasterIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileServiceV1_GetAllProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProfileRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).GetAllProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileServiceV1_GetAllProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).GetAllProfile(ctx, req.(*GetAllProfileRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileServiceV1_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceV1Server).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileServiceV1_DeleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceV1Server).DeleteProfile(ctx, req.(*DeleteProfileRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileServiceV1_ServiceDesc is the grpc.ServiceDesc for ProfileServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.ProfileServiceV1",
	HandlerType: (*ProfileServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _ProfileServiceV1_CreateProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileServiceV1_UpdateProfile_Handler,
		},
		{
			MethodName: "GetProfileByID",
			Handler:    _ProfileServiceV1_GetProfileByID_Handler,
		},
		{
			MethodName: "GetProfileByMasterID",
			Handler:    _ProfileServiceV1_GetProfileByMasterID_Handler,
		},
		{
			MethodName: "GetAllProfile",
			Handler:    _ProfileServiceV1_GetAllProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ProfileServiceV1_DeleteProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service_v1.proto",
}

const (
	SocialNetworkTypeServiceV1_CreateSocialNetworkType_FullMethodName  = "/master.SocialNetworkTypeServiceV1/CreateSocialNetworkType"
	SocialNetworkTypeServiceV1_UpdateSocialNetworkType_FullMethodName  = "/master.SocialNetworkTypeServiceV1/UpdateSocialNetworkType"
	SocialNetworkTypeServiceV1_GetAllSocialNetworkType_FullMethodName  = "/master.SocialNetworkTypeServiceV1/GetAllSocialNetworkType"
	SocialNetworkTypeServiceV1_GetSocialNetworkTypeByID_FullMethodName = "/master.SocialNetworkTypeServiceV1/GetSocialNetworkTypeByID"
	SocialNetworkTypeServiceV1_DeleteSocialNetworkType_FullMethodName  = "/master.SocialNetworkTypeServiceV1/DeleteSocialNetworkType"
)

// SocialNetworkTypeServiceV1Client is the client API for SocialNetworkTypeServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialNetworkTypeServiceV1Client interface {
	CreateSocialNetworkType(ctx context.Context, in *CreateSocialNetworkTypeRequestV1, opts ...grpc.CallOption) (*SocialNetworkTypeEntityV1, error)
	UpdateSocialNetworkType(ctx context.Context, in *SocialNetworkTypeEntityV1, opts ...grpc.CallOption) (*SocialNetworkTypeEntityV1, error)
	GetAllSocialNetworkType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSocialNetworkTypeResponseV1, error)
	GetSocialNetworkTypeByID(ctx context.Context, in *GetSocialNetworkTypeByIDRequestV1, opts ...grpc.CallOption) (*SocialNetworkTypeEntityV1, error)
	DeleteSocialNetworkType(ctx context.Context, in *DeleteSocialNetworkTypeRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type socialNetworkTypeServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSocialNetworkTypeServiceV1Client(cc grpc.ClientConnInterface) SocialNetworkTypeServiceV1Client {
	return &socialNetworkTypeServiceV1Client{cc}
}

func (c *socialNetworkTypeServiceV1Client) CreateSocialNetworkType(ctx context.Context, in *CreateSocialNetworkTypeRequestV1, opts ...grpc.CallOption) (*SocialNetworkTypeEntityV1, error) {
	out := new(SocialNetworkTypeEntityV1)
	err := c.cc.Invoke(ctx, SocialNetworkTypeServiceV1_CreateSocialNetworkType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkTypeServiceV1Client) UpdateSocialNetworkType(ctx context.Context, in *SocialNetworkTypeEntityV1, opts ...grpc.CallOption) (*SocialNetworkTypeEntityV1, error) {
	out := new(SocialNetworkTypeEntityV1)
	err := c.cc.Invoke(ctx, SocialNetworkTypeServiceV1_UpdateSocialNetworkType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkTypeServiceV1Client) GetAllSocialNetworkType(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllSocialNetworkTypeResponseV1, error) {
	out := new(GetAllSocialNetworkTypeResponseV1)
	err := c.cc.Invoke(ctx, SocialNetworkTypeServiceV1_GetAllSocialNetworkType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkTypeServiceV1Client) GetSocialNetworkTypeByID(ctx context.Context, in *GetSocialNetworkTypeByIDRequestV1, opts ...grpc.CallOption) (*SocialNetworkTypeEntityV1, error) {
	out := new(SocialNetworkTypeEntityV1)
	err := c.cc.Invoke(ctx, SocialNetworkTypeServiceV1_GetSocialNetworkTypeByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkTypeServiceV1Client) DeleteSocialNetworkType(ctx context.Context, in *DeleteSocialNetworkTypeRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SocialNetworkTypeServiceV1_DeleteSocialNetworkType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialNetworkTypeServiceV1Server is the server API for SocialNetworkTypeServiceV1 service.
// All implementations must embed UnimplementedSocialNetworkTypeServiceV1Server
// for forward compatibility
type SocialNetworkTypeServiceV1Server interface {
	CreateSocialNetworkType(context.Context, *CreateSocialNetworkTypeRequestV1) (*SocialNetworkTypeEntityV1, error)
	UpdateSocialNetworkType(context.Context, *SocialNetworkTypeEntityV1) (*SocialNetworkTypeEntityV1, error)
	GetAllSocialNetworkType(context.Context, *emptypb.Empty) (*GetAllSocialNetworkTypeResponseV1, error)
	GetSocialNetworkTypeByID(context.Context, *GetSocialNetworkTypeByIDRequestV1) (*SocialNetworkTypeEntityV1, error)
	DeleteSocialNetworkType(context.Context, *DeleteSocialNetworkTypeRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedSocialNetworkTypeServiceV1Server()
}

// UnimplementedSocialNetworkTypeServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedSocialNetworkTypeServiceV1Server struct {
}

func (UnimplementedSocialNetworkTypeServiceV1Server) CreateSocialNetworkType(context.Context, *CreateSocialNetworkTypeRequestV1) (*SocialNetworkTypeEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocialNetworkType not implemented")
}
func (UnimplementedSocialNetworkTypeServiceV1Server) UpdateSocialNetworkType(context.Context, *SocialNetworkTypeEntityV1) (*SocialNetworkTypeEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSocialNetworkType not implemented")
}
func (UnimplementedSocialNetworkTypeServiceV1Server) GetAllSocialNetworkType(context.Context, *emptypb.Empty) (*GetAllSocialNetworkTypeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSocialNetworkType not implemented")
}
func (UnimplementedSocialNetworkTypeServiceV1Server) GetSocialNetworkTypeByID(context.Context, *GetSocialNetworkTypeByIDRequestV1) (*SocialNetworkTypeEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocialNetworkTypeByID not implemented")
}
func (UnimplementedSocialNetworkTypeServiceV1Server) DeleteSocialNetworkType(context.Context, *DeleteSocialNetworkTypeRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSocialNetworkType not implemented")
}
func (UnimplementedSocialNetworkTypeServiceV1Server) mustEmbedUnimplementedSocialNetworkTypeServiceV1Server() {
}

// UnsafeSocialNetworkTypeServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialNetworkTypeServiceV1Server will
// result in compilation errors.
type UnsafeSocialNetworkTypeServiceV1Server interface {
	mustEmbedUnimplementedSocialNetworkTypeServiceV1Server()
}

func RegisterSocialNetworkTypeServiceV1Server(s grpc.ServiceRegistrar, srv SocialNetworkTypeServiceV1Server) {
	s.RegisterService(&SocialNetworkTypeServiceV1_ServiceDesc, srv)
}

func _SocialNetworkTypeServiceV1_CreateSocialNetworkType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSocialNetworkTypeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkTypeServiceV1Server).CreateSocialNetworkType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkTypeServiceV1_CreateSocialNetworkType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkTypeServiceV1Server).CreateSocialNetworkType(ctx, req.(*CreateSocialNetworkTypeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkTypeServiceV1_UpdateSocialNetworkType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialNetworkTypeEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkTypeServiceV1Server).UpdateSocialNetworkType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkTypeServiceV1_UpdateSocialNetworkType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkTypeServiceV1Server).UpdateSocialNetworkType(ctx, req.(*SocialNetworkTypeEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkTypeServiceV1_GetAllSocialNetworkType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkTypeServiceV1Server).GetAllSocialNetworkType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkTypeServiceV1_GetAllSocialNetworkType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkTypeServiceV1Server).GetAllSocialNetworkType(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkTypeServiceV1_GetSocialNetworkTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocialNetworkTypeByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkTypeServiceV1Server).GetSocialNetworkTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkTypeServiceV1_GetSocialNetworkTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkTypeServiceV1Server).GetSocialNetworkTypeByID(ctx, req.(*GetSocialNetworkTypeByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkTypeServiceV1_DeleteSocialNetworkType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSocialNetworkTypeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkTypeServiceV1Server).DeleteSocialNetworkType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkTypeServiceV1_DeleteSocialNetworkType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkTypeServiceV1Server).DeleteSocialNetworkType(ctx, req.(*DeleteSocialNetworkTypeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialNetworkTypeServiceV1_ServiceDesc is the grpc.ServiceDesc for SocialNetworkTypeServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialNetworkTypeServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.SocialNetworkTypeServiceV1",
	HandlerType: (*SocialNetworkTypeServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSocialNetworkType",
			Handler:    _SocialNetworkTypeServiceV1_CreateSocialNetworkType_Handler,
		},
		{
			MethodName: "UpdateSocialNetworkType",
			Handler:    _SocialNetworkTypeServiceV1_UpdateSocialNetworkType_Handler,
		},
		{
			MethodName: "GetAllSocialNetworkType",
			Handler:    _SocialNetworkTypeServiceV1_GetAllSocialNetworkType_Handler,
		},
		{
			MethodName: "GetSocialNetworkTypeByID",
			Handler:    _SocialNetworkTypeServiceV1_GetSocialNetworkTypeByID_Handler,
		},
		{
			MethodName: "DeleteSocialNetworkType",
			Handler:    _SocialNetworkTypeServiceV1_DeleteSocialNetworkType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service_v1.proto",
}

const (
	SocialNetworkServiceV1_CreateSocialNetwork_FullMethodName         = "/master.SocialNetworkServiceV1/CreateSocialNetwork"
	SocialNetworkServiceV1_UpdateSocialNetwork_FullMethodName         = "/master.SocialNetworkServiceV1/UpdateSocialNetwork"
	SocialNetworkServiceV1_GetSocialNetworkByID_FullMethodName        = "/master.SocialNetworkServiceV1/GetSocialNetworkByID"
	SocialNetworkServiceV1_GetSocialNetworkByProfileID_FullMethodName = "/master.SocialNetworkServiceV1/GetSocialNetworkByProfileID"
	SocialNetworkServiceV1_DeleteSocialNetwork_FullMethodName         = "/master.SocialNetworkServiceV1/DeleteSocialNetwork"
)

// SocialNetworkServiceV1Client is the client API for SocialNetworkServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialNetworkServiceV1Client interface {
	CreateSocialNetwork(ctx context.Context, in *CreateSocialNetworkRequestV1, opts ...grpc.CallOption) (*SocialNetworkEntityV1, error)
	UpdateSocialNetwork(ctx context.Context, in *SocialNetworkEntityV1, opts ...grpc.CallOption) (*SocialNetworkEntityV1, error)
	GetSocialNetworkByID(ctx context.Context, in *GetSocialNetworkByIDRequestV1, opts ...grpc.CallOption) (*SocialNetworkEntityV1, error)
	GetSocialNetworkByProfileID(ctx context.Context, in *GetSocialNetworkByProfileIDRequestV1, opts ...grpc.CallOption) (*GetSocialNetworkByProfileIDResponseV1, error)
	DeleteSocialNetwork(ctx context.Context, in *DeleteSocialNetworkRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type socialNetworkServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSocialNetworkServiceV1Client(cc grpc.ClientConnInterface) SocialNetworkServiceV1Client {
	return &socialNetworkServiceV1Client{cc}
}

func (c *socialNetworkServiceV1Client) CreateSocialNetwork(ctx context.Context, in *CreateSocialNetworkRequestV1, opts ...grpc.CallOption) (*SocialNetworkEntityV1, error) {
	out := new(SocialNetworkEntityV1)
	err := c.cc.Invoke(ctx, SocialNetworkServiceV1_CreateSocialNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkServiceV1Client) UpdateSocialNetwork(ctx context.Context, in *SocialNetworkEntityV1, opts ...grpc.CallOption) (*SocialNetworkEntityV1, error) {
	out := new(SocialNetworkEntityV1)
	err := c.cc.Invoke(ctx, SocialNetworkServiceV1_UpdateSocialNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkServiceV1Client) GetSocialNetworkByID(ctx context.Context, in *GetSocialNetworkByIDRequestV1, opts ...grpc.CallOption) (*SocialNetworkEntityV1, error) {
	out := new(SocialNetworkEntityV1)
	err := c.cc.Invoke(ctx, SocialNetworkServiceV1_GetSocialNetworkByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkServiceV1Client) GetSocialNetworkByProfileID(ctx context.Context, in *GetSocialNetworkByProfileIDRequestV1, opts ...grpc.CallOption) (*GetSocialNetworkByProfileIDResponseV1, error) {
	out := new(GetSocialNetworkByProfileIDResponseV1)
	err := c.cc.Invoke(ctx, SocialNetworkServiceV1_GetSocialNetworkByProfileID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialNetworkServiceV1Client) DeleteSocialNetwork(ctx context.Context, in *DeleteSocialNetworkRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SocialNetworkServiceV1_DeleteSocialNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialNetworkServiceV1Server is the server API for SocialNetworkServiceV1 service.
// All implementations must embed UnimplementedSocialNetworkServiceV1Server
// for forward compatibility
type SocialNetworkServiceV1Server interface {
	CreateSocialNetwork(context.Context, *CreateSocialNetworkRequestV1) (*SocialNetworkEntityV1, error)
	UpdateSocialNetwork(context.Context, *SocialNetworkEntityV1) (*SocialNetworkEntityV1, error)
	GetSocialNetworkByID(context.Context, *GetSocialNetworkByIDRequestV1) (*SocialNetworkEntityV1, error)
	GetSocialNetworkByProfileID(context.Context, *GetSocialNetworkByProfileIDRequestV1) (*GetSocialNetworkByProfileIDResponseV1, error)
	DeleteSocialNetwork(context.Context, *DeleteSocialNetworkRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedSocialNetworkServiceV1Server()
}

// UnimplementedSocialNetworkServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedSocialNetworkServiceV1Server struct {
}

func (UnimplementedSocialNetworkServiceV1Server) CreateSocialNetwork(context.Context, *CreateSocialNetworkRequestV1) (*SocialNetworkEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocialNetwork not implemented")
}
func (UnimplementedSocialNetworkServiceV1Server) UpdateSocialNetwork(context.Context, *SocialNetworkEntityV1) (*SocialNetworkEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSocialNetwork not implemented")
}
func (UnimplementedSocialNetworkServiceV1Server) GetSocialNetworkByID(context.Context, *GetSocialNetworkByIDRequestV1) (*SocialNetworkEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocialNetworkByID not implemented")
}
func (UnimplementedSocialNetworkServiceV1Server) GetSocialNetworkByProfileID(context.Context, *GetSocialNetworkByProfileIDRequestV1) (*GetSocialNetworkByProfileIDResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocialNetworkByProfileID not implemented")
}
func (UnimplementedSocialNetworkServiceV1Server) DeleteSocialNetwork(context.Context, *DeleteSocialNetworkRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSocialNetwork not implemented")
}
func (UnimplementedSocialNetworkServiceV1Server) mustEmbedUnimplementedSocialNetworkServiceV1Server() {
}

// UnsafeSocialNetworkServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialNetworkServiceV1Server will
// result in compilation errors.
type UnsafeSocialNetworkServiceV1Server interface {
	mustEmbedUnimplementedSocialNetworkServiceV1Server()
}

func RegisterSocialNetworkServiceV1Server(s grpc.ServiceRegistrar, srv SocialNetworkServiceV1Server) {
	s.RegisterService(&SocialNetworkServiceV1_ServiceDesc, srv)
}

func _SocialNetworkServiceV1_CreateSocialNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSocialNetworkRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkServiceV1Server).CreateSocialNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkServiceV1_CreateSocialNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkServiceV1Server).CreateSocialNetwork(ctx, req.(*CreateSocialNetworkRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkServiceV1_UpdateSocialNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialNetworkEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkServiceV1Server).UpdateSocialNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkServiceV1_UpdateSocialNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkServiceV1Server).UpdateSocialNetwork(ctx, req.(*SocialNetworkEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkServiceV1_GetSocialNetworkByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocialNetworkByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkServiceV1Server).GetSocialNetworkByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkServiceV1_GetSocialNetworkByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkServiceV1Server).GetSocialNetworkByID(ctx, req.(*GetSocialNetworkByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkServiceV1_GetSocialNetworkByProfileID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSocialNetworkByProfileIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkServiceV1Server).GetSocialNetworkByProfileID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkServiceV1_GetSocialNetworkByProfileID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkServiceV1Server).GetSocialNetworkByProfileID(ctx, req.(*GetSocialNetworkByProfileIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialNetworkServiceV1_DeleteSocialNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSocialNetworkRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialNetworkServiceV1Server).DeleteSocialNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialNetworkServiceV1_DeleteSocialNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialNetworkServiceV1Server).DeleteSocialNetwork(ctx, req.(*DeleteSocialNetworkRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialNetworkServiceV1_ServiceDesc is the grpc.ServiceDesc for SocialNetworkServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialNetworkServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.SocialNetworkServiceV1",
	HandlerType: (*SocialNetworkServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSocialNetwork",
			Handler:    _SocialNetworkServiceV1_CreateSocialNetwork_Handler,
		},
		{
			MethodName: "UpdateSocialNetwork",
			Handler:    _SocialNetworkServiceV1_UpdateSocialNetwork_Handler,
		},
		{
			MethodName: "GetSocialNetworkByID",
			Handler:    _SocialNetworkServiceV1_GetSocialNetworkByID_Handler,
		},
		{
			MethodName: "GetSocialNetworkByProfileID",
			Handler:    _SocialNetworkServiceV1_GetSocialNetworkByProfileID_Handler,
		},
		{
			MethodName: "DeleteSocialNetwork",
			Handler:    _SocialNetworkServiceV1_DeleteSocialNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service_v1.proto",
}

const (
	ImageServiceV1_CreateImage_FullMethodName         = "/master.ImageServiceV1/CreateImage"
	ImageServiceV1_UpdateImage_FullMethodName         = "/master.ImageServiceV1/UpdateImage"
	ImageServiceV1_GetImageByID_FullMethodName        = "/master.ImageServiceV1/GetImageByID"
	ImageServiceV1_GetImageByProfileID_FullMethodName = "/master.ImageServiceV1/GetImageByProfileID"
	ImageServiceV1_DeleteImage_FullMethodName         = "/master.ImageServiceV1/DeleteImage"
)

// ImageServiceV1Client is the client API for ImageServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceV1Client interface {
	CreateImage(ctx context.Context, in *CreateImageRequestV1, opts ...grpc.CallOption) (*ImageEntityV1, error)
	UpdateImage(ctx context.Context, in *ImageEntityV1, opts ...grpc.CallOption) (*ImageEntityV1, error)
	GetImageByID(ctx context.Context, in *GetImageByIDRequestV1, opts ...grpc.CallOption) (*ImageEntityV1, error)
	GetImageByProfileID(ctx context.Context, in *GetImageByProfileIDRequestV1, opts ...grpc.CallOption) (*GetImageByProfileIDResponseV1, error)
	DeleteImage(ctx context.Context, in *DeleteImageRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type imageServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceV1Client(cc grpc.ClientConnInterface) ImageServiceV1Client {
	return &imageServiceV1Client{cc}
}

func (c *imageServiceV1Client) CreateImage(ctx context.Context, in *CreateImageRequestV1, opts ...grpc.CallOption) (*ImageEntityV1, error) {
	out := new(ImageEntityV1)
	err := c.cc.Invoke(ctx, ImageServiceV1_CreateImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceV1Client) UpdateImage(ctx context.Context, in *ImageEntityV1, opts ...grpc.CallOption) (*ImageEntityV1, error) {
	out := new(ImageEntityV1)
	err := c.cc.Invoke(ctx, ImageServiceV1_UpdateImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceV1Client) GetImageByID(ctx context.Context, in *GetImageByIDRequestV1, opts ...grpc.CallOption) (*ImageEntityV1, error) {
	out := new(ImageEntityV1)
	err := c.cc.Invoke(ctx, ImageServiceV1_GetImageByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceV1Client) GetImageByProfileID(ctx context.Context, in *GetImageByProfileIDRequestV1, opts ...grpc.CallOption) (*GetImageByProfileIDResponseV1, error) {
	out := new(GetImageByProfileIDResponseV1)
	err := c.cc.Invoke(ctx, ImageServiceV1_GetImageByProfileID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceV1Client) DeleteImage(ctx context.Context, in *DeleteImageRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ImageServiceV1_DeleteImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceV1Server is the server API for ImageServiceV1 service.
// All implementations must embed UnimplementedImageServiceV1Server
// for forward compatibility
type ImageServiceV1Server interface {
	CreateImage(context.Context, *CreateImageRequestV1) (*ImageEntityV1, error)
	UpdateImage(context.Context, *ImageEntityV1) (*ImageEntityV1, error)
	GetImageByID(context.Context, *GetImageByIDRequestV1) (*ImageEntityV1, error)
	GetImageByProfileID(context.Context, *GetImageByProfileIDRequestV1) (*GetImageByProfileIDResponseV1, error)
	DeleteImage(context.Context, *DeleteImageRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedImageServiceV1Server()
}

// UnimplementedImageServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedImageServiceV1Server struct {
}

func (UnimplementedImageServiceV1Server) CreateImage(context.Context, *CreateImageRequestV1) (*ImageEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedImageServiceV1Server) UpdateImage(context.Context, *ImageEntityV1) (*ImageEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedImageServiceV1Server) GetImageByID(context.Context, *GetImageByIDRequestV1) (*ImageEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageByID not implemented")
}
func (UnimplementedImageServiceV1Server) GetImageByProfileID(context.Context, *GetImageByProfileIDRequestV1) (*GetImageByProfileIDResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageByProfileID not implemented")
}
func (UnimplementedImageServiceV1Server) DeleteImage(context.Context, *DeleteImageRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedImageServiceV1Server) mustEmbedUnimplementedImageServiceV1Server() {}

// UnsafeImageServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceV1Server will
// result in compilation errors.
type UnsafeImageServiceV1Server interface {
	mustEmbedUnimplementedImageServiceV1Server()
}

func RegisterImageServiceV1Server(s grpc.ServiceRegistrar, srv ImageServiceV1Server) {
	s.RegisterService(&ImageServiceV1_ServiceDesc, srv)
}

func _ImageServiceV1_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceV1Server).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceV1_CreateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceV1Server).CreateImage(ctx, req.(*CreateImageRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceV1_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceV1Server).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceV1_UpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceV1Server).UpdateImage(ctx, req.(*ImageEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceV1_GetImageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceV1Server).GetImageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceV1_GetImageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceV1Server).GetImageByID(ctx, req.(*GetImageByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceV1_GetImageByProfileID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageByProfileIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceV1Server).GetImageByProfileID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceV1_GetImageByProfileID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceV1Server).GetImageByProfileID(ctx, req.(*GetImageByProfileIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageServiceV1_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceV1Server).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageServiceV1_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceV1Server).DeleteImage(ctx, req.(*DeleteImageRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageServiceV1_ServiceDesc is the grpc.ServiceDesc for ImageServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.ImageServiceV1",
	HandlerType: (*ImageServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImage",
			Handler:    _ImageServiceV1_CreateImage_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _ImageServiceV1_UpdateImage_Handler,
		},
		{
			MethodName: "GetImageByID",
			Handler:    _ImageServiceV1_GetImageByID_Handler,
		},
		{
			MethodName: "GetImageByProfileID",
			Handler:    _ImageServiceV1_GetImageByProfileID_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _ImageServiceV1_DeleteImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service_v1.proto",
}

const (
	CategoryMasterServiceV1_CreateCategoryMaster_FullMethodName          = "/master.CategoryMasterServiceV1/CreateCategoryMaster"
	CategoryMasterServiceV1_GetCategoryMaster_FullMethodName             = "/master.CategoryMasterServiceV1/GetCategoryMaster"
	CategoryMasterServiceV1_GetCategoryMasterByCategoryID_FullMethodName = "/master.CategoryMasterServiceV1/GetCategoryMasterByCategoryID"
	CategoryMasterServiceV1_GetCategoryMasterByMasterID_FullMethodName   = "/master.CategoryMasterServiceV1/GetCategoryMasterByMasterID"
	CategoryMasterServiceV1_DeleteCategoryMaster_FullMethodName          = "/master.CategoryMasterServiceV1/DeleteCategoryMaster"
)

// CategoryMasterServiceV1Client is the client API for CategoryMasterServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryMasterServiceV1Client interface {
	CreateCategoryMaster(ctx context.Context, in *CategoryMasterEntityV1, opts ...grpc.CallOption) (*CategoryMasterEntityV1, error)
	GetCategoryMaster(ctx context.Context, in *CategoryMasterEntityV1, opts ...grpc.CallOption) (*CategoryMasterEntityV1, error)
	GetCategoryMasterByCategoryID(ctx context.Context, in *GetCategoryMasterByCategoryIDRequestV1, opts ...grpc.CallOption) (*GetCategoryMasterByCategoryIDResponseV1, error)
	GetCategoryMasterByMasterID(ctx context.Context, in *GetCategoryMasterByMasterIDRequestV1, opts ...grpc.CallOption) (*GetCategoryMasterByMasterIDResponseV1, error)
	DeleteCategoryMaster(ctx context.Context, in *CategoryMasterEntityV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type categoryMasterServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCategoryMasterServiceV1Client(cc grpc.ClientConnInterface) CategoryMasterServiceV1Client {
	return &categoryMasterServiceV1Client{cc}
}

func (c *categoryMasterServiceV1Client) CreateCategoryMaster(ctx context.Context, in *CategoryMasterEntityV1, opts ...grpc.CallOption) (*CategoryMasterEntityV1, error) {
	out := new(CategoryMasterEntityV1)
	err := c.cc.Invoke(ctx, CategoryMasterServiceV1_CreateCategoryMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryMasterServiceV1Client) GetCategoryMaster(ctx context.Context, in *CategoryMasterEntityV1, opts ...grpc.CallOption) (*CategoryMasterEntityV1, error) {
	out := new(CategoryMasterEntityV1)
	err := c.cc.Invoke(ctx, CategoryMasterServiceV1_GetCategoryMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryMasterServiceV1Client) GetCategoryMasterByCategoryID(ctx context.Context, in *GetCategoryMasterByCategoryIDRequestV1, opts ...grpc.CallOption) (*GetCategoryMasterByCategoryIDResponseV1, error) {
	out := new(GetCategoryMasterByCategoryIDResponseV1)
	err := c.cc.Invoke(ctx, CategoryMasterServiceV1_GetCategoryMasterByCategoryID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryMasterServiceV1Client) GetCategoryMasterByMasterID(ctx context.Context, in *GetCategoryMasterByMasterIDRequestV1, opts ...grpc.CallOption) (*GetCategoryMasterByMasterIDResponseV1, error) {
	out := new(GetCategoryMasterByMasterIDResponseV1)
	err := c.cc.Invoke(ctx, CategoryMasterServiceV1_GetCategoryMasterByMasterID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryMasterServiceV1Client) DeleteCategoryMaster(ctx context.Context, in *CategoryMasterEntityV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoryMasterServiceV1_DeleteCategoryMaster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryMasterServiceV1Server is the server API for CategoryMasterServiceV1 service.
// All implementations must embed UnimplementedCategoryMasterServiceV1Server
// for forward compatibility
type CategoryMasterServiceV1Server interface {
	CreateCategoryMaster(context.Context, *CategoryMasterEntityV1) (*CategoryMasterEntityV1, error)
	GetCategoryMaster(context.Context, *CategoryMasterEntityV1) (*CategoryMasterEntityV1, error)
	GetCategoryMasterByCategoryID(context.Context, *GetCategoryMasterByCategoryIDRequestV1) (*GetCategoryMasterByCategoryIDResponseV1, error)
	GetCategoryMasterByMasterID(context.Context, *GetCategoryMasterByMasterIDRequestV1) (*GetCategoryMasterByMasterIDResponseV1, error)
	DeleteCategoryMaster(context.Context, *CategoryMasterEntityV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedCategoryMasterServiceV1Server()
}

// UnimplementedCategoryMasterServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedCategoryMasterServiceV1Server struct {
}

func (UnimplementedCategoryMasterServiceV1Server) CreateCategoryMaster(context.Context, *CategoryMasterEntityV1) (*CategoryMasterEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryMaster not implemented")
}
func (UnimplementedCategoryMasterServiceV1Server) GetCategoryMaster(context.Context, *CategoryMasterEntityV1) (*CategoryMasterEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryMaster not implemented")
}
func (UnimplementedCategoryMasterServiceV1Server) GetCategoryMasterByCategoryID(context.Context, *GetCategoryMasterByCategoryIDRequestV1) (*GetCategoryMasterByCategoryIDResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryMasterByCategoryID not implemented")
}
func (UnimplementedCategoryMasterServiceV1Server) GetCategoryMasterByMasterID(context.Context, *GetCategoryMasterByMasterIDRequestV1) (*GetCategoryMasterByMasterIDResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryMasterByMasterID not implemented")
}
func (UnimplementedCategoryMasterServiceV1Server) DeleteCategoryMaster(context.Context, *CategoryMasterEntityV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryMaster not implemented")
}
func (UnimplementedCategoryMasterServiceV1Server) mustEmbedUnimplementedCategoryMasterServiceV1Server() {
}

// UnsafeCategoryMasterServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryMasterServiceV1Server will
// result in compilation errors.
type UnsafeCategoryMasterServiceV1Server interface {
	mustEmbedUnimplementedCategoryMasterServiceV1Server()
}

func RegisterCategoryMasterServiceV1Server(s grpc.ServiceRegistrar, srv CategoryMasterServiceV1Server) {
	s.RegisterService(&CategoryMasterServiceV1_ServiceDesc, srv)
}

func _CategoryMasterServiceV1_CreateCategoryMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryMasterEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryMasterServiceV1Server).CreateCategoryMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryMasterServiceV1_CreateCategoryMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryMasterServiceV1Server).CreateCategoryMaster(ctx, req.(*CategoryMasterEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryMasterServiceV1_GetCategoryMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryMasterEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryMasterServiceV1Server).GetCategoryMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryMasterServiceV1_GetCategoryMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryMasterServiceV1Server).GetCategoryMaster(ctx, req.(*CategoryMasterEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryMasterServiceV1_GetCategoryMasterByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryMasterByCategoryIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryMasterServiceV1Server).GetCategoryMasterByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryMasterServiceV1_GetCategoryMasterByCategoryID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryMasterServiceV1Server).GetCategoryMasterByCategoryID(ctx, req.(*GetCategoryMasterByCategoryIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryMasterServiceV1_GetCategoryMasterByMasterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryMasterByMasterIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryMasterServiceV1Server).GetCategoryMasterByMasterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryMasterServiceV1_GetCategoryMasterByMasterID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryMasterServiceV1Server).GetCategoryMasterByMasterID(ctx, req.(*GetCategoryMasterByMasterIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryMasterServiceV1_DeleteCategoryMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryMasterEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryMasterServiceV1Server).DeleteCategoryMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryMasterServiceV1_DeleteCategoryMaster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryMasterServiceV1Server).DeleteCategoryMaster(ctx, req.(*CategoryMasterEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryMasterServiceV1_ServiceDesc is the grpc.ServiceDesc for CategoryMasterServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryMasterServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.CategoryMasterServiceV1",
	HandlerType: (*CategoryMasterServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategoryMaster",
			Handler:    _CategoryMasterServiceV1_CreateCategoryMaster_Handler,
		},
		{
			MethodName: "GetCategoryMaster",
			Handler:    _CategoryMasterServiceV1_GetCategoryMaster_Handler,
		},
		{
			MethodName: "GetCategoryMasterByCategoryID",
			Handler:    _CategoryMasterServiceV1_GetCategoryMasterByCategoryID_Handler,
		},
		{
			MethodName: "GetCategoryMasterByMasterID",
			Handler:    _CategoryMasterServiceV1_GetCategoryMasterByMasterID_Handler,
		},
		{
			MethodName: "DeleteCategoryMaster",
			Handler:    _CategoryMasterServiceV1_DeleteCategoryMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service_v1.proto",
}
