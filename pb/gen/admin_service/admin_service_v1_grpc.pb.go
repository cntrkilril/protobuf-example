// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: admin_service_v1.proto

package admin_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminServiceV1_CreateAdmin_FullMethodName          = "/admin.AdminServiceV1/CreateAdmin"
	AdminServiceV1_GetByTgUsername_FullMethodName      = "/admin.AdminServiceV1/GetByTgUsername"
	AdminServiceV1_UpdateAdmin_FullMethodName          = "/admin.AdminServiceV1/UpdateAdmin"
	AdminServiceV1_GetByID_FullMethodName              = "/admin.AdminServiceV1/GetByID"
	AdminServiceV1_CheckPassword_FullMethodName        = "/admin.AdminServiceV1/CheckPassword"
	AdminServiceV1_GenerateTelegramCode_FullMethodName = "/admin.AdminServiceV1/GenerateTelegramCode"
)

// AdminServiceV1Client is the client API for AdminServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceV1Client interface {
	CreateAdmin(ctx context.Context, in *CreateAdminRequestV1, opts ...grpc.CallOption) (*AdminEntityV1, error)
	GetByTgUsername(ctx context.Context, in *GetByTgUsernameV1, opts ...grpc.CallOption) (*AdminEntityV1, error)
	UpdateAdmin(ctx context.Context, in *AdminEntityV1, opts ...grpc.CallOption) (*AdminEntityV1, error)
	GetByID(ctx context.Context, in *GetByIDV1, opts ...grpc.CallOption) (*AdminEntityV1, error)
	CheckPassword(ctx context.Context, in *CheckPasswordRequestV1, opts ...grpc.CallOption) (*CheckPasswordResponseV1, error)
	GenerateTelegramCode(ctx context.Context, in *GenerateTelegramCodeRequestV1, opts ...grpc.CallOption) (*GenerateTelegramCodeResponseV1, error)
}

type adminServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceV1Client(cc grpc.ClientConnInterface) AdminServiceV1Client {
	return &adminServiceV1Client{cc}
}

func (c *adminServiceV1Client) CreateAdmin(ctx context.Context, in *CreateAdminRequestV1, opts ...grpc.CallOption) (*AdminEntityV1, error) {
	out := new(AdminEntityV1)
	err := c.cc.Invoke(ctx, AdminServiceV1_CreateAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceV1Client) GetByTgUsername(ctx context.Context, in *GetByTgUsernameV1, opts ...grpc.CallOption) (*AdminEntityV1, error) {
	out := new(AdminEntityV1)
	err := c.cc.Invoke(ctx, AdminServiceV1_GetByTgUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceV1Client) UpdateAdmin(ctx context.Context, in *AdminEntityV1, opts ...grpc.CallOption) (*AdminEntityV1, error) {
	out := new(AdminEntityV1)
	err := c.cc.Invoke(ctx, AdminServiceV1_UpdateAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceV1Client) GetByID(ctx context.Context, in *GetByIDV1, opts ...grpc.CallOption) (*AdminEntityV1, error) {
	out := new(AdminEntityV1)
	err := c.cc.Invoke(ctx, AdminServiceV1_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceV1Client) CheckPassword(ctx context.Context, in *CheckPasswordRequestV1, opts ...grpc.CallOption) (*CheckPasswordResponseV1, error) {
	out := new(CheckPasswordResponseV1)
	err := c.cc.Invoke(ctx, AdminServiceV1_CheckPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceV1Client) GenerateTelegramCode(ctx context.Context, in *GenerateTelegramCodeRequestV1, opts ...grpc.CallOption) (*GenerateTelegramCodeResponseV1, error) {
	out := new(GenerateTelegramCodeResponseV1)
	err := c.cc.Invoke(ctx, AdminServiceV1_GenerateTelegramCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceV1Server is the server API for AdminServiceV1 service.
// All implementations must embed UnimplementedAdminServiceV1Server
// for forward compatibility
type AdminServiceV1Server interface {
	CreateAdmin(context.Context, *CreateAdminRequestV1) (*AdminEntityV1, error)
	GetByTgUsername(context.Context, *GetByTgUsernameV1) (*AdminEntityV1, error)
	UpdateAdmin(context.Context, *AdminEntityV1) (*AdminEntityV1, error)
	GetByID(context.Context, *GetByIDV1) (*AdminEntityV1, error)
	CheckPassword(context.Context, *CheckPasswordRequestV1) (*CheckPasswordResponseV1, error)
	GenerateTelegramCode(context.Context, *GenerateTelegramCodeRequestV1) (*GenerateTelegramCodeResponseV1, error)
	mustEmbedUnimplementedAdminServiceV1Server()
}

// UnimplementedAdminServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceV1Server struct {
}

func (UnimplementedAdminServiceV1Server) CreateAdmin(context.Context, *CreateAdminRequestV1) (*AdminEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (UnimplementedAdminServiceV1Server) GetByTgUsername(context.Context, *GetByTgUsernameV1) (*AdminEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByTgUsername not implemented")
}
func (UnimplementedAdminServiceV1Server) UpdateAdmin(context.Context, *AdminEntityV1) (*AdminEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedAdminServiceV1Server) GetByID(context.Context, *GetByIDV1) (*AdminEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedAdminServiceV1Server) CheckPassword(context.Context, *CheckPasswordRequestV1) (*CheckPasswordResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedAdminServiceV1Server) GenerateTelegramCode(context.Context, *GenerateTelegramCodeRequestV1) (*GenerateTelegramCodeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTelegramCode not implemented")
}
func (UnimplementedAdminServiceV1Server) mustEmbedUnimplementedAdminServiceV1Server() {}

// UnsafeAdminServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceV1Server will
// result in compilation errors.
type UnsafeAdminServiceV1Server interface {
	mustEmbedUnimplementedAdminServiceV1Server()
}

func RegisterAdminServiceV1Server(s grpc.ServiceRegistrar, srv AdminServiceV1Server) {
	s.RegisterService(&AdminServiceV1_ServiceDesc, srv)
}

func _AdminServiceV1_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceV1Server).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminServiceV1_CreateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceV1Server).CreateAdmin(ctx, req.(*CreateAdminRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServiceV1_GetByTgUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByTgUsernameV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceV1Server).GetByTgUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminServiceV1_GetByTgUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceV1Server).GetByTgUsername(ctx, req.(*GetByTgUsernameV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServiceV1_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceV1Server).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminServiceV1_UpdateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceV1Server).UpdateAdmin(ctx, req.(*AdminEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServiceV1_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceV1Server).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminServiceV1_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceV1Server).GetByID(ctx, req.(*GetByIDV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServiceV1_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceV1Server).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminServiceV1_CheckPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceV1Server).CheckPassword(ctx, req.(*CheckPasswordRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminServiceV1_GenerateTelegramCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTelegramCodeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceV1Server).GenerateTelegramCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminServiceV1_GenerateTelegramCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceV1Server).GenerateTelegramCode(ctx, req.(*GenerateTelegramCodeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminServiceV1_ServiceDesc is the grpc.ServiceDesc for AdminServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminServiceV1",
	HandlerType: (*AdminServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdmin",
			Handler:    _AdminServiceV1_CreateAdmin_Handler,
		},
		{
			MethodName: "GetByTgUsername",
			Handler:    _AdminServiceV1_GetByTgUsername_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _AdminServiceV1_UpdateAdmin_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _AdminServiceV1_GetByID_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _AdminServiceV1_CheckPassword_Handler,
		},
		{
			MethodName: "GenerateTelegramCode",
			Handler:    _AdminServiceV1_GenerateTelegramCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service_v1.proto",
}
