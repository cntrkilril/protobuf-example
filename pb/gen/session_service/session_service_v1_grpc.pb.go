// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: session_service_v1.proto

package session_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionServiceV1_Create_FullMethodName          = "/session.SessionServiceV1/Create"
	SessionServiceV1_GetBySessionKey_FullMethodName = "/session.SessionServiceV1/GetBySessionKey"
	SessionServiceV1_Update_FullMethodName          = "/session.SessionServiceV1/Update"
	SessionServiceV1_Delete_FullMethodName          = "/session.SessionServiceV1/Delete"
)

// SessionServiceV1Client is the client API for SessionServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionServiceV1Client interface {
	Create(ctx context.Context, in *CreateSessionV1, opts ...grpc.CallOption) (*Session, error)
	GetBySessionKey(ctx context.Context, in *GetBySessionKeyV1, opts ...grpc.CallOption) (*Session, error)
	Update(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	Delete(ctx context.Context, in *DeleteSessionV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sessionServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceV1Client(cc grpc.ClientConnInterface) SessionServiceV1Client {
	return &sessionServiceV1Client{cc}
}

func (c *sessionServiceV1Client) Create(ctx context.Context, in *CreateSessionV1, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, SessionServiceV1_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceV1Client) GetBySessionKey(ctx context.Context, in *GetBySessionKeyV1, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, SessionServiceV1_GetBySessionKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceV1Client) Update(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, SessionServiceV1_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceV1Client) Delete(ctx context.Context, in *DeleteSessionV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionServiceV1_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceV1Server is the server API for SessionServiceV1 service.
// All implementations must embed UnimplementedSessionServiceV1Server
// for forward compatibility
type SessionServiceV1Server interface {
	Create(context.Context, *CreateSessionV1) (*Session, error)
	GetBySessionKey(context.Context, *GetBySessionKeyV1) (*Session, error)
	Update(context.Context, *Session) (*Session, error)
	Delete(context.Context, *DeleteSessionV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedSessionServiceV1Server()
}

// UnimplementedSessionServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedSessionServiceV1Server struct {
}

func (UnimplementedSessionServiceV1Server) Create(context.Context, *CreateSessionV1) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSessionServiceV1Server) GetBySessionKey(context.Context, *GetBySessionKeyV1) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySessionKey not implemented")
}
func (UnimplementedSessionServiceV1Server) Update(context.Context, *Session) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSessionServiceV1Server) Delete(context.Context, *DeleteSessionV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSessionServiceV1Server) mustEmbedUnimplementedSessionServiceV1Server() {}

// UnsafeSessionServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServiceV1Server will
// result in compilation errors.
type UnsafeSessionServiceV1Server interface {
	mustEmbedUnimplementedSessionServiceV1Server()
}

func RegisterSessionServiceV1Server(s grpc.ServiceRegistrar, srv SessionServiceV1Server) {
	s.RegisterService(&SessionServiceV1_ServiceDesc, srv)
}

func _SessionServiceV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionServiceV1_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceV1Server).Create(ctx, req.(*CreateSessionV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionServiceV1_GetBySessionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySessionKeyV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceV1Server).GetBySessionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionServiceV1_GetBySessionKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceV1Server).GetBySessionKey(ctx, req.(*GetBySessionKeyV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionServiceV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionServiceV1_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceV1Server).Update(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionServiceV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionServiceV1_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceV1Server).Delete(ctx, req.(*DeleteSessionV1))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionServiceV1_ServiceDesc is the grpc.ServiceDesc for SessionServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.SessionServiceV1",
	HandlerType: (*SessionServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SessionServiceV1_Create_Handler,
		},
		{
			MethodName: "GetBySessionKey",
			Handler:    _SessionServiceV1_GetBySessionKey_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SessionServiceV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SessionServiceV1_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session_service_v1.proto",
}
