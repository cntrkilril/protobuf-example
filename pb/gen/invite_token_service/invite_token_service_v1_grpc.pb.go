// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: invite_token_service_v1.proto

package invite_token_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InviteTokenServiceV1_Create_FullMethodName       = "/invite_token.InviteTokenServiceV1/Create"
	InviteTokenServiceV1_GetTokenData_FullMethodName = "/invite_token.InviteTokenServiceV1/GetTokenData"
	InviteTokenServiceV1_GetAllTokens_FullMethodName = "/invite_token.InviteTokenServiceV1/GetAllTokens"
	InviteTokenServiceV1_Update_FullMethodName       = "/invite_token.InviteTokenServiceV1/Update"
	InviteTokenServiceV1_Delete_FullMethodName       = "/invite_token.InviteTokenServiceV1/Delete"
)

// InviteTokenServiceV1Client is the client API for InviteTokenServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InviteTokenServiceV1Client interface {
	Create(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InviteTokenEntity, error)
	GetTokenData(ctx context.Context, in *GetTokenDataRequestV1, opts ...grpc.CallOption) (*InviteTokenEntity, error)
	GetAllTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllTokensResponseV1, error)
	Update(ctx context.Context, in *UpdateTokenRequestV1, opts ...grpc.CallOption) (*InviteTokenEntity, error)
	Delete(ctx context.Context, in *DeleteTokenRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type inviteTokenServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewInviteTokenServiceV1Client(cc grpc.ClientConnInterface) InviteTokenServiceV1Client {
	return &inviteTokenServiceV1Client{cc}
}

func (c *inviteTokenServiceV1Client) Create(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InviteTokenEntity, error) {
	out := new(InviteTokenEntity)
	err := c.cc.Invoke(ctx, InviteTokenServiceV1_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteTokenServiceV1Client) GetTokenData(ctx context.Context, in *GetTokenDataRequestV1, opts ...grpc.CallOption) (*InviteTokenEntity, error) {
	out := new(InviteTokenEntity)
	err := c.cc.Invoke(ctx, InviteTokenServiceV1_GetTokenData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteTokenServiceV1Client) GetAllTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllTokensResponseV1, error) {
	out := new(GetAllTokensResponseV1)
	err := c.cc.Invoke(ctx, InviteTokenServiceV1_GetAllTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteTokenServiceV1Client) Update(ctx context.Context, in *UpdateTokenRequestV1, opts ...grpc.CallOption) (*InviteTokenEntity, error) {
	out := new(InviteTokenEntity)
	err := c.cc.Invoke(ctx, InviteTokenServiceV1_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteTokenServiceV1Client) Delete(ctx context.Context, in *DeleteTokenRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InviteTokenServiceV1_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InviteTokenServiceV1Server is the server API for InviteTokenServiceV1 service.
// All implementations must embed UnimplementedInviteTokenServiceV1Server
// for forward compatibility
type InviteTokenServiceV1Server interface {
	Create(context.Context, *emptypb.Empty) (*InviteTokenEntity, error)
	GetTokenData(context.Context, *GetTokenDataRequestV1) (*InviteTokenEntity, error)
	GetAllTokens(context.Context, *emptypb.Empty) (*GetAllTokensResponseV1, error)
	Update(context.Context, *UpdateTokenRequestV1) (*InviteTokenEntity, error)
	Delete(context.Context, *DeleteTokenRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedInviteTokenServiceV1Server()
}

// UnimplementedInviteTokenServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedInviteTokenServiceV1Server struct {
}

func (UnimplementedInviteTokenServiceV1Server) Create(context.Context, *emptypb.Empty) (*InviteTokenEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInviteTokenServiceV1Server) GetTokenData(context.Context, *GetTokenDataRequestV1) (*InviteTokenEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenData not implemented")
}
func (UnimplementedInviteTokenServiceV1Server) GetAllTokens(context.Context, *emptypb.Empty) (*GetAllTokensResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokens not implemented")
}
func (UnimplementedInviteTokenServiceV1Server) Update(context.Context, *UpdateTokenRequestV1) (*InviteTokenEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedInviteTokenServiceV1Server) Delete(context.Context, *DeleteTokenRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInviteTokenServiceV1Server) mustEmbedUnimplementedInviteTokenServiceV1Server() {}

// UnsafeInviteTokenServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InviteTokenServiceV1Server will
// result in compilation errors.
type UnsafeInviteTokenServiceV1Server interface {
	mustEmbedUnimplementedInviteTokenServiceV1Server()
}

func RegisterInviteTokenServiceV1Server(s grpc.ServiceRegistrar, srv InviteTokenServiceV1Server) {
	s.RegisterService(&InviteTokenServiceV1_ServiceDesc, srv)
}

func _InviteTokenServiceV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteTokenServiceV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteTokenServiceV1_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteTokenServiceV1Server).Create(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteTokenServiceV1_GetTokenData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenDataRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteTokenServiceV1Server).GetTokenData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteTokenServiceV1_GetTokenData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteTokenServiceV1Server).GetTokenData(ctx, req.(*GetTokenDataRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteTokenServiceV1_GetAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteTokenServiceV1Server).GetAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteTokenServiceV1_GetAllTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteTokenServiceV1Server).GetAllTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteTokenServiceV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteTokenServiceV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteTokenServiceV1_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteTokenServiceV1Server).Update(ctx, req.(*UpdateTokenRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _InviteTokenServiceV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteTokenServiceV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InviteTokenServiceV1_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteTokenServiceV1Server).Delete(ctx, req.(*DeleteTokenRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// InviteTokenServiceV1_ServiceDesc is the grpc.ServiceDesc for InviteTokenServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InviteTokenServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invite_token.InviteTokenServiceV1",
	HandlerType: (*InviteTokenServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InviteTokenServiceV1_Create_Handler,
		},
		{
			MethodName: "GetTokenData",
			Handler:    _InviteTokenServiceV1_GetTokenData_Handler,
		},
		{
			MethodName: "GetAllTokens",
			Handler:    _InviteTokenServiceV1_GetAllTokens_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InviteTokenServiceV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InviteTokenServiceV1_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invite_token_service_v1.proto",
}
