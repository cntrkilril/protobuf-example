// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services_service_v1.proto

package services_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServicesServiceV1_CreateService_FullMethodName           = "/services.ServicesServiceV1/CreateService"
	ServicesServiceV1_UpdateService_FullMethodName           = "/services.ServicesServiceV1/UpdateService"
	ServicesServiceV1_GetServicesByMasterID_FullMethodName   = "/services.ServicesServiceV1/GetServicesByMasterID"
	ServicesServiceV1_GetServicesByCategoryID_FullMethodName = "/services.ServicesServiceV1/GetServicesByCategoryID"
	ServicesServiceV1_GetServiceByID_FullMethodName          = "/services.ServicesServiceV1/GetServiceByID"
	ServicesServiceV1_DeleteService_FullMethodName           = "/services.ServicesServiceV1/DeleteService"
)

// ServicesServiceV1Client is the client API for ServicesServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesServiceV1Client interface {
	CreateService(ctx context.Context, in *CreateServiceRequestV1, opts ...grpc.CallOption) (*ServiceV1, error)
	UpdateService(ctx context.Context, in *ServiceV1, opts ...grpc.CallOption) (*ServiceV1, error)
	GetServicesByMasterID(ctx context.Context, in *GetServicesByMasterIDRequestV1, opts ...grpc.CallOption) (*ServicesArrayV1, error)
	GetServicesByCategoryID(ctx context.Context, in *GetServiceByCategoryIDRequestV1, opts ...grpc.CallOption) (*ServicesArrayV1, error)
	GetServiceByID(ctx context.Context, in *GetServiceByIDRequestV1, opts ...grpc.CallOption) (*ServiceV1, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type servicesServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewServicesServiceV1Client(cc grpc.ClientConnInterface) ServicesServiceV1Client {
	return &servicesServiceV1Client{cc}
}

func (c *servicesServiceV1Client) CreateService(ctx context.Context, in *CreateServiceRequestV1, opts ...grpc.CallOption) (*ServiceV1, error) {
	out := new(ServiceV1)
	err := c.cc.Invoke(ctx, ServicesServiceV1_CreateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceV1Client) UpdateService(ctx context.Context, in *ServiceV1, opts ...grpc.CallOption) (*ServiceV1, error) {
	out := new(ServiceV1)
	err := c.cc.Invoke(ctx, ServicesServiceV1_UpdateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceV1Client) GetServicesByMasterID(ctx context.Context, in *GetServicesByMasterIDRequestV1, opts ...grpc.CallOption) (*ServicesArrayV1, error) {
	out := new(ServicesArrayV1)
	err := c.cc.Invoke(ctx, ServicesServiceV1_GetServicesByMasterID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceV1Client) GetServicesByCategoryID(ctx context.Context, in *GetServiceByCategoryIDRequestV1, opts ...grpc.CallOption) (*ServicesArrayV1, error) {
	out := new(ServicesArrayV1)
	err := c.cc.Invoke(ctx, ServicesServiceV1_GetServicesByCategoryID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceV1Client) GetServiceByID(ctx context.Context, in *GetServiceByIDRequestV1, opts ...grpc.CallOption) (*ServiceV1, error) {
	out := new(ServiceV1)
	err := c.cc.Invoke(ctx, ServicesServiceV1_GetServiceByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServiceV1Client) DeleteService(ctx context.Context, in *DeleteServiceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServicesServiceV1_DeleteService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServiceV1Server is the server API for ServicesServiceV1 service.
// All implementations must embed UnimplementedServicesServiceV1Server
// for forward compatibility
type ServicesServiceV1Server interface {
	CreateService(context.Context, *CreateServiceRequestV1) (*ServiceV1, error)
	UpdateService(context.Context, *ServiceV1) (*ServiceV1, error)
	GetServicesByMasterID(context.Context, *GetServicesByMasterIDRequestV1) (*ServicesArrayV1, error)
	GetServicesByCategoryID(context.Context, *GetServiceByCategoryIDRequestV1) (*ServicesArrayV1, error)
	GetServiceByID(context.Context, *GetServiceByIDRequestV1) (*ServiceV1, error)
	DeleteService(context.Context, *DeleteServiceRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedServicesServiceV1Server()
}

// UnimplementedServicesServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedServicesServiceV1Server struct {
}

func (UnimplementedServicesServiceV1Server) CreateService(context.Context, *CreateServiceRequestV1) (*ServiceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedServicesServiceV1Server) UpdateService(context.Context, *ServiceV1) (*ServiceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedServicesServiceV1Server) GetServicesByMasterID(context.Context, *GetServicesByMasterIDRequestV1) (*ServicesArrayV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesByMasterID not implemented")
}
func (UnimplementedServicesServiceV1Server) GetServicesByCategoryID(context.Context, *GetServiceByCategoryIDRequestV1) (*ServicesArrayV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesByCategoryID not implemented")
}
func (UnimplementedServicesServiceV1Server) GetServiceByID(context.Context, *GetServiceByIDRequestV1) (*ServiceV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceByID not implemented")
}
func (UnimplementedServicesServiceV1Server) DeleteService(context.Context, *DeleteServiceRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedServicesServiceV1Server) mustEmbedUnimplementedServicesServiceV1Server() {}

// UnsafeServicesServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServiceV1Server will
// result in compilation errors.
type UnsafeServicesServiceV1Server interface {
	mustEmbedUnimplementedServicesServiceV1Server()
}

func RegisterServicesServiceV1Server(s grpc.ServiceRegistrar, srv ServicesServiceV1Server) {
	s.RegisterService(&ServicesServiceV1_ServiceDesc, srv)
}

func _ServicesServiceV1_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceV1Server).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesServiceV1_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceV1Server).CreateService(ctx, req.(*CreateServiceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServiceV1_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceV1Server).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesServiceV1_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceV1Server).UpdateService(ctx, req.(*ServiceV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServiceV1_GetServicesByMasterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesByMasterIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceV1Server).GetServicesByMasterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesServiceV1_GetServicesByMasterID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceV1Server).GetServicesByMasterID(ctx, req.(*GetServicesByMasterIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServiceV1_GetServicesByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceByCategoryIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceV1Server).GetServicesByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesServiceV1_GetServicesByCategoryID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceV1Server).GetServicesByCategoryID(ctx, req.(*GetServiceByCategoryIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServiceV1_GetServiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceV1Server).GetServiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesServiceV1_GetServiceByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceV1Server).GetServiceByID(ctx, req.(*GetServiceByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServiceV1_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServiceV1Server).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesServiceV1_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServiceV1Server).DeleteService(ctx, req.(*DeleteServiceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesServiceV1_ServiceDesc is the grpc.ServiceDesc for ServicesServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.ServicesServiceV1",
	HandlerType: (*ServicesServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _ServicesServiceV1_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _ServicesServiceV1_UpdateService_Handler,
		},
		{
			MethodName: "GetServicesByMasterID",
			Handler:    _ServicesServiceV1_GetServicesByMasterID_Handler,
		},
		{
			MethodName: "GetServicesByCategoryID",
			Handler:    _ServicesServiceV1_GetServicesByCategoryID_Handler,
		},
		{
			MethodName: "GetServiceByID",
			Handler:    _ServicesServiceV1_GetServiceByID_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ServicesServiceV1_DeleteService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services_service_v1.proto",
}

const (
	CategoriesServiceV1_CreateCategory_FullMethodName  = "/services.CategoriesServiceV1/CreateCategory"
	CategoriesServiceV1_UpdateCategory_FullMethodName  = "/services.CategoriesServiceV1/UpdateCategory"
	CategoriesServiceV1_GetCategoryByID_FullMethodName = "/services.CategoriesServiceV1/GetCategoryByID"
	CategoriesServiceV1_GetCategories_FullMethodName   = "/services.CategoriesServiceV1/GetCategories"
	CategoriesServiceV1_DeleteCategory_FullMethodName  = "/services.CategoriesServiceV1/DeleteCategory"
)

// CategoriesServiceV1Client is the client API for CategoriesServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriesServiceV1Client interface {
	CreateCategory(ctx context.Context, in *CreateCategoryRequestV1, opts ...grpc.CallOption) (*CategoryV1, error)
	UpdateCategory(ctx context.Context, in *CategoryV1, opts ...grpc.CallOption) (*CategoryV1, error)
	GetCategoryByID(ctx context.Context, in *GetCategoryByIDRequestV1, opts ...grpc.CallOption) (*CategoryV1, error)
	GetCategories(ctx context.Context, in *GetCategoriesRequestV1, opts ...grpc.CallOption) (*CategoriesArrayV1, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type categoriesServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesServiceV1Client(cc grpc.ClientConnInterface) CategoriesServiceV1Client {
	return &categoriesServiceV1Client{cc}
}

func (c *categoriesServiceV1Client) CreateCategory(ctx context.Context, in *CreateCategoryRequestV1, opts ...grpc.CallOption) (*CategoryV1, error) {
	out := new(CategoryV1)
	err := c.cc.Invoke(ctx, CategoriesServiceV1_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceV1Client) UpdateCategory(ctx context.Context, in *CategoryV1, opts ...grpc.CallOption) (*CategoryV1, error) {
	out := new(CategoryV1)
	err := c.cc.Invoke(ctx, CategoriesServiceV1_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceV1Client) GetCategoryByID(ctx context.Context, in *GetCategoryByIDRequestV1, opts ...grpc.CallOption) (*CategoryV1, error) {
	out := new(CategoryV1)
	err := c.cc.Invoke(ctx, CategoriesServiceV1_GetCategoryByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceV1Client) GetCategories(ctx context.Context, in *GetCategoriesRequestV1, opts ...grpc.CallOption) (*CategoriesArrayV1, error) {
	out := new(CategoriesArrayV1)
	err := c.cc.Invoke(ctx, CategoriesServiceV1_GetCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServiceV1Client) DeleteCategory(ctx context.Context, in *DeleteCategoryRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CategoriesServiceV1_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoriesServiceV1Server is the server API for CategoriesServiceV1 service.
// All implementations must embed UnimplementedCategoriesServiceV1Server
// for forward compatibility
type CategoriesServiceV1Server interface {
	CreateCategory(context.Context, *CreateCategoryRequestV1) (*CategoryV1, error)
	UpdateCategory(context.Context, *CategoryV1) (*CategoryV1, error)
	GetCategoryByID(context.Context, *GetCategoryByIDRequestV1) (*CategoryV1, error)
	GetCategories(context.Context, *GetCategoriesRequestV1) (*CategoriesArrayV1, error)
	DeleteCategory(context.Context, *DeleteCategoryRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedCategoriesServiceV1Server()
}

// UnimplementedCategoriesServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedCategoriesServiceV1Server struct {
}

func (UnimplementedCategoriesServiceV1Server) CreateCategory(context.Context, *CreateCategoryRequestV1) (*CategoryV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoriesServiceV1Server) UpdateCategory(context.Context, *CategoryV1) (*CategoryV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCategoriesServiceV1Server) GetCategoryByID(context.Context, *GetCategoryByIDRequestV1) (*CategoryV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryByID not implemented")
}
func (UnimplementedCategoriesServiceV1Server) GetCategories(context.Context, *GetCategoriesRequestV1) (*CategoriesArrayV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedCategoriesServiceV1Server) DeleteCategory(context.Context, *DeleteCategoryRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCategoriesServiceV1Server) mustEmbedUnimplementedCategoriesServiceV1Server() {}

// UnsafeCategoriesServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriesServiceV1Server will
// result in compilation errors.
type UnsafeCategoriesServiceV1Server interface {
	mustEmbedUnimplementedCategoriesServiceV1Server()
}

func RegisterCategoriesServiceV1Server(s grpc.ServiceRegistrar, srv CategoriesServiceV1Server) {
	s.RegisterService(&CategoriesServiceV1_ServiceDesc, srv)
}

func _CategoriesServiceV1_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceV1Server).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServiceV1_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceV1Server).CreateCategory(ctx, req.(*CreateCategoryRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServiceV1_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceV1Server).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServiceV1_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceV1Server).UpdateCategory(ctx, req.(*CategoryV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServiceV1_GetCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceV1Server).GetCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServiceV1_GetCategoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceV1Server).GetCategoryByID(ctx, req.(*GetCategoryByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServiceV1_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceV1Server).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServiceV1_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceV1Server).GetCategories(ctx, req.(*GetCategoriesRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServiceV1_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServiceV1Server).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServiceV1_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServiceV1Server).DeleteCategory(ctx, req.(*DeleteCategoryRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoriesServiceV1_ServiceDesc is the grpc.ServiceDesc for CategoriesServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriesServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.CategoriesServiceV1",
	HandlerType: (*CategoriesServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _CategoriesServiceV1_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _CategoriesServiceV1_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategoryByID",
			Handler:    _CategoriesServiceV1_GetCategoryByID_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _CategoriesServiceV1_GetCategories_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _CategoriesServiceV1_DeleteCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services_service_v1.proto",
}
