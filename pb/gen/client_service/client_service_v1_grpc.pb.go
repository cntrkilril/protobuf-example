// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: client_service_v1.proto

package client_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientServiceV1_CreateClient_FullMethodName          = "/client.ClientServiceV1/CreateClient"
	ClientServiceV1_UpdateClient_FullMethodName          = "/client.ClientServiceV1/UpdateClient"
	ClientServiceV1_DeleteClient_FullMethodName          = "/client.ClientServiceV1/DeleteClient"
	ClientServiceV1_GetClientByID_FullMethodName         = "/client.ClientServiceV1/GetClientByID"
	ClientServiceV1_GetClientByTgUsername_FullMethodName = "/client.ClientServiceV1/GetClientByTgUsername"
	ClientServiceV1_GetAllClient_FullMethodName          = "/client.ClientServiceV1/GetAllClient"
)

// ClientServiceV1Client is the client API for ClientServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceV1Client interface {
	CreateClient(ctx context.Context, in *CreateClientRequestV1, opts ...grpc.CallOption) (*ClientEntityV1, error)
	UpdateClient(ctx context.Context, in *ClientEntityV1, opts ...grpc.CallOption) (*ClientEntityV1, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClientByID(ctx context.Context, in *GetClientByIDRequestV1, opts ...grpc.CallOption) (*ClientEntityV1, error)
	GetClientByTgUsername(ctx context.Context, in *GetClientByTgUsernameRequestV1, opts ...grpc.CallOption) (*ClientEntityV1, error)
	GetAllClient(ctx context.Context, in *GetAllClientRequestV1, opts ...grpc.CallOption) (*GetAllClientResponseV1, error)
}

type clientServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceV1Client(cc grpc.ClientConnInterface) ClientServiceV1Client {
	return &clientServiceV1Client{cc}
}

func (c *clientServiceV1Client) CreateClient(ctx context.Context, in *CreateClientRequestV1, opts ...grpc.CallOption) (*ClientEntityV1, error) {
	out := new(ClientEntityV1)
	err := c.cc.Invoke(ctx, ClientServiceV1_CreateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceV1Client) UpdateClient(ctx context.Context, in *ClientEntityV1, opts ...grpc.CallOption) (*ClientEntityV1, error) {
	out := new(ClientEntityV1)
	err := c.cc.Invoke(ctx, ClientServiceV1_UpdateClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceV1Client) DeleteClient(ctx context.Context, in *DeleteClientRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientServiceV1_DeleteClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceV1Client) GetClientByID(ctx context.Context, in *GetClientByIDRequestV1, opts ...grpc.CallOption) (*ClientEntityV1, error) {
	out := new(ClientEntityV1)
	err := c.cc.Invoke(ctx, ClientServiceV1_GetClientByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceV1Client) GetClientByTgUsername(ctx context.Context, in *GetClientByTgUsernameRequestV1, opts ...grpc.CallOption) (*ClientEntityV1, error) {
	out := new(ClientEntityV1)
	err := c.cc.Invoke(ctx, ClientServiceV1_GetClientByTgUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceV1Client) GetAllClient(ctx context.Context, in *GetAllClientRequestV1, opts ...grpc.CallOption) (*GetAllClientResponseV1, error) {
	out := new(GetAllClientResponseV1)
	err := c.cc.Invoke(ctx, ClientServiceV1_GetAllClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceV1Server is the server API for ClientServiceV1 service.
// All implementations must embed UnimplementedClientServiceV1Server
// for forward compatibility
type ClientServiceV1Server interface {
	CreateClient(context.Context, *CreateClientRequestV1) (*ClientEntityV1, error)
	UpdateClient(context.Context, *ClientEntityV1) (*ClientEntityV1, error)
	DeleteClient(context.Context, *DeleteClientRequestV1) (*emptypb.Empty, error)
	GetClientByID(context.Context, *GetClientByIDRequestV1) (*ClientEntityV1, error)
	GetClientByTgUsername(context.Context, *GetClientByTgUsernameRequestV1) (*ClientEntityV1, error)
	GetAllClient(context.Context, *GetAllClientRequestV1) (*GetAllClientResponseV1, error)
	mustEmbedUnimplementedClientServiceV1Server()
}

// UnimplementedClientServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedClientServiceV1Server struct {
}

func (UnimplementedClientServiceV1Server) CreateClient(context.Context, *CreateClientRequestV1) (*ClientEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedClientServiceV1Server) UpdateClient(context.Context, *ClientEntityV1) (*ClientEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedClientServiceV1Server) DeleteClient(context.Context, *DeleteClientRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedClientServiceV1Server) GetClientByID(context.Context, *GetClientByIDRequestV1) (*ClientEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientByID not implemented")
}
func (UnimplementedClientServiceV1Server) GetClientByTgUsername(context.Context, *GetClientByTgUsernameRequestV1) (*ClientEntityV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientByTgUsername not implemented")
}
func (UnimplementedClientServiceV1Server) GetAllClient(context.Context, *GetAllClientRequestV1) (*GetAllClientResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClient not implemented")
}
func (UnimplementedClientServiceV1Server) mustEmbedUnimplementedClientServiceV1Server() {}

// UnsafeClientServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceV1Server will
// result in compilation errors.
type UnsafeClientServiceV1Server interface {
	mustEmbedUnimplementedClientServiceV1Server()
}

func RegisterClientServiceV1Server(s grpc.ServiceRegistrar, srv ClientServiceV1Server) {
	s.RegisterService(&ClientServiceV1_ServiceDesc, srv)
}

func _ClientServiceV1_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceV1Server).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServiceV1_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceV1Server).CreateClient(ctx, req.(*CreateClientRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServiceV1_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientEntityV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceV1Server).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServiceV1_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceV1Server).UpdateClient(ctx, req.(*ClientEntityV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServiceV1_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceV1Server).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServiceV1_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceV1Server).DeleteClient(ctx, req.(*DeleteClientRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServiceV1_GetClientByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientByIDRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceV1Server).GetClientByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServiceV1_GetClientByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceV1Server).GetClientByID(ctx, req.(*GetClientByIDRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServiceV1_GetClientByTgUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientByTgUsernameRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceV1Server).GetClientByTgUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServiceV1_GetClientByTgUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceV1Server).GetClientByTgUsername(ctx, req.(*GetClientByTgUsernameRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientServiceV1_GetAllClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllClientRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceV1Server).GetAllClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientServiceV1_GetAllClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceV1Server).GetAllClient(ctx, req.(*GetAllClientRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientServiceV1_ServiceDesc is the grpc.ServiceDesc for ClientServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.ClientServiceV1",
	HandlerType: (*ClientServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _ClientServiceV1_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _ClientServiceV1_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _ClientServiceV1_DeleteClient_Handler,
		},
		{
			MethodName: "GetClientByID",
			Handler:    _ClientServiceV1_GetClientByID_Handler,
		},
		{
			MethodName: "GetClientByTgUsername",
			Handler:    _ClientServiceV1_GetClientByTgUsername_Handler,
		},
		{
			MethodName: "GetAllClient",
			Handler:    _ClientServiceV1_GetAllClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_service_v1.proto",
}
